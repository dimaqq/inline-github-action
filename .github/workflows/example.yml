name: Example using inline Python in GitHub Actions

on:
  push:
    branches:
      - main
      - "release/**"
  pull_request:
    branches:
      - main
      - "release/**"

jobs:
  example_job:
    runs-on: ubuntu-latest
    steps:
      # The docket/build-push-action uses the github context,
      # which means the source code is never checked out.
      # Therefore a local action cannot be used for free.
      # Thus, the code (py/js/sh) is inlined here.
      - name: Compute Docker tag using bash
        run: |
          jq --version
          if jq -e '.pull_request.head.repo.fork' "${GITHUB_EVENT_PATH}"
          then
            TAG="random-fork"
          elif SOURCE=$(jq -re '.pull_request.head.ref' "${GITHUB_EVENT_PATH}")
          then
            TAG="foobar-${SOURCE}"
          elif TARGET=$(jq -re '.ref' "${GITHUB_EVENT_PATH}")
          then
            case "${TARGET}" in
              # Note that TARGET is refs/head/<branch-name>
              # Watch out for special characters in bash patterns: |*?[]():class:
              refs/head/main)
                TAG=latest
                ;;
              refs/head/release/1.0)
                TAG=1.0.0
                ;;
              *)
                echo "Don't know how to tag this branch: ${TARGET}"
                ;;
            esac
          fi

          test -n "${TAG}"  # abort if tag could not be computed

          echo "BASH_TAG=${TAG}" >> "${GITHUB_ENV}"
      - name: Compute Docker tag using Python
        run: |
          cat << EOF | python -
          import json, re, os
          event = json.load(open(os.getenv("GITHUB_EVENT_PATH")))
          tag = None
          try:
              if event["pull_request"]["head"]["repo"]["fork"]:
                  tag = "random-fork"
          except KeyError:
              pass

          try:
              if not tag:
                  slug = event["pull_request"]["head"]["ref"]
                  slug = re.sub("[^a-zA-Z0-9._-]", "-", slug)
                  slug = slug.strip(".-")
                  tag = slug[:128]
          except KeyError:
              pass

          if not tag:
              if event["ref"] == "refs/head/main":
                  tag = "latest"
              elif event["ref"] == "refs/head/release/1.0":
                  tag = "1.0.0"
              else:
                  raise ValueError(f"Don't know how to tag branch { event['ref'] !r}")

          with open(os.getenv("GITHUB_ENV"), "a") as fout:
            print("python_tag", tag, sep="=", file=fout)
          EOF
      - name: Compute Docket tag using JavaScript
        run: |
          cat << EOF | node -
          // Node16 can do most ES2020 and ES2021
          // Watch out for tagged template literals though, as GH/yaml uses same syntax
          const fsp = require('fs').promises;

          (async () => {
            event = JSON.parse(fsp.readFile(process.env.GITHUB_EVENT_PATH));
            console.log("foobar", event, "barbaz");
            let tag, slug;
            if (event.pull_request?.head.repo.fork) {
              tag = "random-fork";
            }
            else if (slug = event.pull_request?.head.ref) {
              slug = slug.replaceAll(/[^a-zA-Z0-9._-]/g, "-");
              slug = slug.replace(/^[.-]*/, "");
              tag = slug.substring(0, 128);
            }
            else switch (event.ref) {
              case "refs/head/main":
                tag = "latest";
                break;
              case "refs/head/release/1.0":
                tag = "1.0.0";
                break;
              default:
                throw new Error("Don't know how to tag: " + event.ref);
            }
            if not tag:
              throw new Error("Failed to tag")

            await fsp.appendFile(process.env.GITHUB_ENV, "ja_tag=" + tag + "\n");
          })();
          EOF
      - name: Debug the above
        run: |
          echo "Bash computed" ${{ env.BASH_TAG }}
          echo "Python computed" ${{ env.python_tag }}
          echo "JavaScript computed" ${{ env.js_tag }}
